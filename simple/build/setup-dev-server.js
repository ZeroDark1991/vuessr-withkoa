const path = require('path')
const MFS = require('memory-fs')
const webpack = require('webpack')
const clientConfig = require('./client.config')
const serverConfig = require('./server.config')
const { hotMiddleware } = require('koa-webpack-middleware')

const mfs = new MFS()

const readFile = (fs, file) => {
	try {
		return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
	} catch (e) {
		console.log('errorFs', fs)
		console.log('readFileError', e)
	}
}

module.exports = function setupDevServer(app, cb) {
  let bundle, clientManifest
  let resolve
  const readyPromise = new Promise(r => { resolve = r })
  const ready = (...args) => {
    resolve()
    cb(...args)
  }

  // modify client config to work with hot middleware
  clientConfig.entry.app = ['eventsource-polyfill', 'webpack-hot-middleware/client', clientConfig.entry.app]
  clientConfig.output.filename = '[name].js'
  clientConfig.plugins.push(
  	new webpack.optimize.OccurrenceOrderPlugin(),
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin()
  )

  // dev middleware
  const clientCompiler = webpack(clientConfig)
  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true
  })

  // convert to koa middleware
  app.use(async (ctx, next) => {
  	await devMiddleware(ctx.req, {
  		end: content => { ctx.body = content },
  		setHeader: (name, value) => { ctx.set(name, value) }
  	}, next)
  })
  clientCompiler.plugin('done', stats => {
    stats = stats.toJson()
    stats.errors.forEach(err => console.error(err))
    stats.warnings.forEach(err => console.warn(err))
    if (stats.errors.length) return
    clientManifest = JSON.parse(readFile(
      devMiddleware.fileSystem,
      'vue-ssr-client-manifest.json'
    ))
    if (bundle && clientManifest) {
      ready(bundle, {
        clientManifest
      })
    }
  })

  // hot middleware
  app.use(hotMiddleware(clientCompiler, { heartbeat: 5000 }))

  // watch and update server renderer
  const serverCompiler = webpack(serverConfig)
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err
    stats = stats.toJson()
    if (stats.errors.length) return

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
    if (bundle && clientManifest) {
      ready(bundle, {
        clientManifest
      })
    }
  })

  return readyPromise	
}
